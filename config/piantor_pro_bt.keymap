/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

#define	qk	    1
#define	wk	    2
#define	ek	    3
#define	rk	    4
#define	tk	    5
#define	yk	    21
#define	uk	    22
#define	ik	    23
#define	ok	    24
#define	pk	    25
#define	ak	    7
#define	sk	    8
#define	dk	    9
#define	fk	    10
#define	gk	    11
#define	hk	    27
#define	jk	    28
#define	kk	    29
#define	lk	    30
#define	semik	31
#define	zk	    13
#define	xk	    14
#define	ck	    15
#define	vk	    16
#define	bk	    17
#define	nk	    33
#define	mk	    34
#define	commak	35
#define	periodk	36
#define	slashk	37

/ {
    chosen {
        zmk,physical-layout = &default_layout;
    };
};

&caps_word {
    continue-list = <BACKSPACE DELETE>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "DEFAULT_LAYER";
            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC | ENT | RSE  | ALT |
            bindings = <
                &sk LG(LS(LA(LCTRL))) &kp Q &kp W   &kp E     &kp R       &kp T           &kp Y           &kp U       &kp I     &kp O   &kp P    &sk RALT
                &sk LGUI              &kp A &kp S   &kp D     &mt LCTRL F &mt LS(LCTRL) G &mt RS(RCTRL) H &mt RCTRL J &kp K     &kp L   &kp SEMI &sk RCTRL
                &sk LS(LA(LCTRL))     &kp Z &kp X   &kp C     &kp V       &kp B           &kp N           &kp M       &kp COMMA &kp DOT &kp FSLH &sk RSHIFT
                                                    &kp TAB   &kp LSHFT   &kp SPACE       &kp RET         &kp RSHIFT  &kp BSPC
            >;
        };

        numbsym_layer {
            display-name = "NUMBSYMB_LAYER";
            bindings = <
                &trans  &kp EXCL    &kp AT    &kp HASH   &kp DLLR   &kp PRCNT   &kp CARET &kp AMPS &kp ASTRK &kp LPAR &kp RPAR  &trans
                &trans  &kp N1      &kp N2    &kp N3     &kp N4     &kp N5      &kp N6    &kp N7   &kp N8    &kp N9   &kp N0    &trans
                &trans  &kp GRAVE   &kp BSLH  &kp EQUAL  &kp MINUS  &kp UNDER   &kp SQT   &kp SEMI &kp COMMA &kp DOT  &kp SLASH &trans
                                              &trans     &trans     &trans      &trans    &trans   &trans 
            >;
        };

        function_layer {
            display-name = "FUNCTION_LAYER";
            bindings = <
                &trans &kp C_PLAY      &kp C_STOP &kp C_NEXT &kp C_AC_BACK &kp F11  &kp F12 &kp K_VOL_UP &kp C_VOL_DN  &kp C_MUTE  &kp RG(L)       &trans
                &trans &kp F1          &kp F2     &kp F3     &kp F4        &kp F5   &kp F6  &kp F7       &kp F8        &kp F9      &kp F10         &trans
                &trans &kp LC(LA(DEL)) &trans     &trans     &trans        &trans   &trans  &trans       &trans        &trans      &kp LC(LA(DEL)) &trans
                                                  &trans     &trans        &trans   &trans  &trans       &trans 
            >;
        };

        appcontrol_layer {
            display-name = "APPCONTROL_LAYER";
            bindings = <
                &trans &bt BT_CLR  &bt BT_SEL 0 &kp LG(DOT) &kp LG(R)             &kp LS(LC(LA(LG(T)))) &kp LS(LC(LA(LG(P)))) &kp C_BRI_UP    &kp C_BRI_DN          &bt BT_SEL 0 &bt BT_CLR  &trans
                &trans &bootloader &bt BT_SEL 1 &trans      &kp LG(E)             &kp LS(LC(LA(LG(W)))) &kp C_AL_CALC         &kp RC(RS(ESC)) &kp LS(LC(LA(LG(L)))) &bt BT_SEL 1 &bootloader &trans
                &trans &sys_reset  &bt BT_SEL 2 &kp LG(V)   &kp LS(LC(LA(LG(O)))) &kp LS(LC(LA(LG(X)))) &kp LS(LG(S))         &trans          &trans                &bt BT_SEL 2 &sys_reset  &trans
                                                &trans      &trans                &trans                &trans                &trans          &trans       
            >;
        };

        mouse_layer {
            display-name = "MOUSE_LAYER";
            bindings = <
                &trans &kp LC(LS(O)) &kp LC(T) &kp LC(LS(T))  &kp LA(HOME) &kp UP    &kp PG_UP &msc SCRL_LEFT &mmv MOVE_UP    &msc SCRL_RIGHT  &kp K_VOL_UP &trans
                &trans &kp LC(D)     &mkp LCLK &mkp MCLK      &mkp  RCLK   &kp DOWN  &kp PG_DN &mmv MOVE_LEFT &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp K_VOL_DN &trans
                &trans &kp LC(LS(B)) &kp LC(N) &kp LS(LC(N))  &kp LEFT     &kp RIGHT &kp HOME  &msc SCRL_UP   &msc SCRL_DOWN  &kp END          &kp K_MUTE   &trans
                                               &trans         &trans       &trans    &trans    &trans         &trans       
            >;
        };
    };
};
