/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

/ {
    chosen {
        zmk,physical-layout = &default_layout;
    };
};

&caps_word {
    continue-list = <BACKSPACE DELETE>;
};

/ {
    behaviors {
        shift_layer: shift_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk RSHIFT>, <&tog 1>;
        };
        shift_layer_hold: shift_layer_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&mo 1>, <&shift_layer>;
        };
    };
  };

/ {
    macros {
        control_panel: control_panel { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		        , <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp O &kp N &kp T &kp R &kp O &kp L &kp ENTER>
                ;
        };

        launch_chrome: launch_chrome { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		        , <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp H &kp R &kp O &kp M &kp E &kp ENTER>
                ;
        };

        mycomputer: mycomputer { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		        , <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp S &kp H &kp E &kp L &kp L &kp COLON &kp M &kp Y &kp C &kp O &kp M &kp P &kp U &kp T &kp E &kp R &kp F &kp O &kp L &kp D &kp E &kp R &kp ENTER>
                ;
        };
	
	    launch_vscode: launch_vscode { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		        , <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp O &kp D &kp E &kp ENTER>
                ;
        };

    	launch_edge: launch_edge { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		        , <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp M &kp I &kp C &kp R &kp O &kp S &kp O &kp F &kp T &kp MINUS &kp E &kp D &kp G &kp E &kp COLON &kp ENTER>
                ;
        };
    	
	    launch_notepadpp: launch_notepadpp { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		        , <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp N &kp O &kp T &kp E &kp P &kp A &kp D &kp PLUS &kp PLUS &kp ENTER>
                ;
        };
    	
        // Layer with mod when held
	
	    lm: lm {
	        compatible = "zmk,behavior-macro-two-param";
	        wait-ms = <0>;
	        tap-ms = <0>;
	        #binding-cells = <2>;
	        bindings
	            = <&macro_param_1to1>
	            , <&macro_press &mo MACRO_PLACEHOLDER>
	            , <&macro_param_2to1>
	            , <&macro_press &kp MACRO_PLACEHOLDER>
	            , <&macro_pause_for_release>
	            , <&macro_param_2to1>
	            , <&macro_release &kp MACRO_PLACEHOLDER>
	            , <&macro_param_1to1>
	            , <&macro_release &mo MACRO_PLACEHOLDER>
	            ;
	    };

    };
};

/ {
    combos {
        compatible = "zmk,combos";

        // Characters
      
        combo_doublequ {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DQT>;
        };
        combo_singlequ {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp SQT>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LPAR>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp RPAR>;
        };
        combo_lbrace {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp LBKT>;
        };
        combo_rbrace {
            timeout-ms = <50>;
            key-positions = <31 32 33>;
            bindings = <&kp RBKT>;
        };
        combo_lcurly {
            timeout-ms = <50>;
            key-positions = <26 28>;
            bindings = <&kp LBRC>;
        };
        combo_rcurly {
            timeout-ms = <50>;
            key-positions = <31 33>;
            bindings = <&kp RBRC>;
        };

        // Layer combos
        
        combo_alpha {
            timeout-ms = <50>;
            key-positions = <19 20 21>;
            bindings = <&to 0>;
        };
        combo_numbsym {
            timeout-ms = <50>;
            key-positions = <18 19 20>;
            bindings = <&tog 1>;
        };
        combo_numbsymosl {
            timeout-ms = <50>;
            key-positions = <18 20>;
            bindings = <&sl 1>;
        };
        combo_func {
            timeout-ms = <50>;
            key-positions = <30 31 32>;
            bindings = <&tog 2>;
        };
        combo_funcosl {
            timeout-ms = <50>;
            key-positions = <30 32>;
            bindings = <&sl 2>;
        };
        combo_apps {
            timeout-ms = <50>;
            key-positions = <6 7 8>;
            bindings = <&tog 3>;
        };
        combo_appsosl {
            timeout-ms = <50>;
            key-positions = <6 8>;
            bindings = <&sl 3>;
        };

        combo_mouse {
            timeout-ms = <50>;
            key-positions = <2 3 4 5>;
            bindings = <&tog 4>;
        };
        
   // Behavioral

        combo_esc {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
        };
   
        combo_winclose {
            timeout-ms = <50>;
            require-prior-idle-ms = <350>;
            key-positions = <4 5>;
            bindings = <&kp LC(F4)>;
        };
   
        combo_appclose {
            timeout-ms = <50>;
            require-prior-idle-ms = <350>;
            key-positions = <28 29>;
            bindings = <&kp LA(F4)>;
        };
        combo_caplock {
            timeout-ms = <50>;
            key-positions = <25 26 27>;
            bindings = <&kp CAPS>;
        };
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <27 29>;
            bindings = <&caps_word>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <15 17>;
            bindings = <&kp DEL>;
        };
        combo_leftarr {
            timeout-ms = <100>;
            key-positions = <15 16 17>;
            bindings = <&kp LEFT>;
        };
        combo_rightarr {
            timeout-ms = <100>;
            key-positions = <3 4 5>;
            bindings = <&kp RIGHT>;
        };
        combo_uparr {
            timeout-ms = <100>;
            key-positions = <2 3 4>;
            bindings = <&kp UP>;
        };
        combo_dnarr {
            timeout-ms = <100>;
            key-positions = <14 15 16>;
            bindings = <&kp DOWN>;
        };
        combo_pgup {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&kp PG_UP>;
        };
        combo_pgdn {
            timeout-ms = <50>;
            key-positions = <28 31>;
            bindings = <&kp PG_DN>;
        };
        combo_home {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp HOME>;
        };
        combo_end {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&kp END>;
        };
       combo_teamsmute {
            timeout-ms = <50>;
            key-positions = <4 7>;
            bindings = <&kp LS(LC(M))>;
        };
       combo_teamsvidtog {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp LS(LC(O))>;
        };
        // Boot key combos

        combo_bootleft {
            timeout-ms = <50>;
            key-positions = <1 5>;
            bindings = <&bootloader>;
        };

        combo_bootright {
            timeout-ms = <50>;
            key-positions = <6 10>;
            bindings = <&bootloader>;
        };

        // Mouse combos

        combo_left_click {
            timeout-ms = <50>;
            key-positions = <14 16>;
            bindings = <&mkp LCLK>;
        };
        combo_right_click {
            timeout-ms = <50>;
            key-positions = <2 4>;
            bindings = <&mkp  RCLK>;
        };
        combo_middle_click {
            timeout-ms = <50>;
            key-positions = <3 5>;
            bindings = <&mkp MCLK>;
        }; 

        // Macro combos

        combo_chrome {
            timeout-ms = <50>;
	        require-prior-idle-ms = <300>;
            key-positions = <27 18>;
            bindings = <&launch_chrome>;
        };

        combo_mycomputer {
            timeout-ms = <50>;
	        require-prior-idle-ms = <300>;
            key-positions = <27 6>;
            bindings = <&mycomputer>;
        };

        combo_cpanel {
            timeout-ms = <50>;
	        require-prior-idle-ms = <300>;
            key-positions = <27 30>;
            bindings = <&control_panel>;
        };

        combo_vscode {
            timeout-ms = <50>;
	        require-prior-idle-ms = <300>;
            key-positions = <27 7>;
            bindings = <&launch_vscode>;
        };

        combo_edge {
            timeout-ms = <50>;
	        require-prior-idle-ms = <300>;
            key-positions = <27 19>;
            bindings = <&launch_edge>;
        };
        
        combo_notepadpp {
            timeout-ms = <50>;
	        require-prior-idle-ms = <300>;
            key-positions = <27 31>;
            bindings = <&launch_notepadpp>;
        };

        // activate number layer with shift when held.

	    comnbo_layermod_left {
	        timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&lm 1 RSHIFT>;
	    };

    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "DEFAULT_LAYER";
            // --------------------------------------------------------------------------------------
            // | SK HYPER |  Q  |  W  |  E  |  R   |  T  |  Y  |  U    |  I  |  O  |  P  | SK ALT   |
            // | SK LGUI  |  A  |  S  |  D  |  F   |  G  |  H  |  J    |  K  |  L  |  ;  | SK CTRL  |
            // | SK MEH   |  Z  |  X  |  C  |  V   |  B  |  N  |  M    |  ,  |  .  |  /  | SK SHIFT |
            //                        | TAB | SHFT | SPC | ENT | SHIFT | BSP |
            bindings = <
                &sk LG(LS(LA(LCTRL))) &kp Q &kp W  &kp E   &kp R       &kp T           &kp Y           &kp U       &kp I     &kp O   &kp P    &sk RALT
                &sk LGUI              &kp A &kp S  &kp D   &mt LCTRL F &mt LS(LCTRL) G &mt RS(RCTRL) H &mt RCTRL J &kp K     &kp L   &kp SEMI &sk RCTRL
                &sk LS(LA(LCTRL))     &kp Z &kp X  &kp C   &kp V       &kp B           &kp N           &kp M       &kp COMMA &kp DOT &kp FSLH &shift_layer_hold
                                                   &kp TAB &kp LSHFT   &kp SPACE       &kp RET         &kp RSHIFT  &kp BSPC
            >;
        };

        numbsym_layer {
            display-name = "NUMBSYMB_LAYER";
            // --------------------------------------------------------------------------------------
            // | SK HYPER |  !  |  @  |  #  |  $   |  %  |  ^  |  &    |  *  |  (  |  )  | SK ALT   |
            // | SK LGUI  |  1  |  2  |  3  |  4   |  5  |  6  |  7    |  8  |  9  |  0  | SK CTRL  |
            // | SK MEH   |  `  |  \  |  =  |  -   |  _  |  '  |  ;    |  ,  |  .  |  /  | SK SHIFT |
            //                        | TAB | SHFT | SPC | ENT | SHIFT | BSP |
            bindings = <
                &trans &kp EXCL  &kp AT   &kp HASH  &kp DLLR  &kp PRCNT &kp CARET &kp AMPS &kp ASTRK &kp LPAR &kp RPAR  &trans
                &trans &kp N1    &kp N2   &kp N3    &kp N4    &kp N5    &kp N6    &kp N7   &kp N8    &kp N9   &kp N0    &trans
                &trans &kp GRAVE &kp BSLH &kp EQUAL &kp MINUS &kp UNDER &kp SQT   &kp SEMI &trans    &trans   &kp SLASH &trans
                                          &trans    &trans    &trans    &trans    &trans   &trans 
            >;
        };

        function_layer {
            display-name = "FUNCTION_LAYER";
            // --------------------------------------------------------------------------------------
            // | SK HYPER | PLAY  | STOP | NXT | BACK | F11 | F12 | VUP  | VDN | MUTE | LOCK  | SK ALT   |
            // | SK LGUI  | F1    | F2   | F3  | F4   | F5  | F6  | F7   | F8  | F9   | F10   | SK CTRL  |
            // | SK MEH   | CADEL | X    | C   | V    | B   | N   | M    | ,   |  .   | CADEL | SK SHIFT |
            //                           | TAB | SHFT | SPC | ENT | SHFT | BSP |
            bindings = <
                &trans &kp C_PLAY      &kp C_STOP &kp C_NEXT &kp C_AC_BACK &kp F11 &kp F12 &kp K_VOL_UP &kp C_VOL_DN &kp C_MUTE &kp RG(L)       &trans
                &trans &kp F1          &kp F2     &kp F3     &kp F4        &kp F5  &kp F6  &kp F7       &kp F8       &kp F9     &kp F10         &trans
                &trans &kp LC(LA(DEL)) &trans     &trans     &trans        &trans  &trans  &trans       &trans       &trans     &kp LC(LA(DEL)) &trans
                                                  &trans     &trans        &trans  &trans  &trans       &trans 
            >;
        };

        appcontrol_layer {
            display-name = "APPCONTROL_LAYER";
            // --------------------------------------------------------------------------------------------------
            // | SK HYPER | BTCLR | BT0 | EMOJI  | RUN   | TEAMS | PWRPT | BRIUP | BRDN  | BT0 | BTCLR | SK ALT   |
            // | SK LGUI  | BOOT  | BT1 | CTRLPN | FILX  | WORD  | CALC  | TASK  | LNKIN | BT1 | BOOT  | SK CTRL  |
            // | SK MEH   | RESET | BT2 | CLIPB  | OUTLK | EXCEL | SNIP  |  M    | MYCMP | BT2 | RESET | SK SHIFT |
            //                          | TAB    | SHFT  | SPC   | ENT    | SHFT | BCKSP |
            bindings = <
                &trans &bt BT_CLR  &bt BT_SEL 0 &kp LG(DOT)    &kp LG(R)             &kp LS(LC(LA(LG(T)))) &kp LS(LC(LA(LG(P)))) &kp C_BRI_UP    &kp C_BRI_DN          &bt BT_SEL 0 &bt BT_CLR  &trans
                &trans &bootloader &bt BT_SEL 1 &control_panel &kp LG(E)             &kp LS(LC(LA(LG(W)))) &kp C_AL_CALC         &kp RC(RS(ESC)) &kp LS(LC(LA(LG(L)))) &bt BT_SEL 1 &bootloader &trans
                &trans &sys_reset  &bt BT_SEL 2 &kp LG(V)      &kp LS(LC(LA(LG(O)))) &kp LS(LC(LA(LG(X)))) &kp LS(LG(S))         &trans          &mycomputer           &bt BT_SEL 2 &sys_reset  &trans
                                                &trans         &trans                &trans                &trans                &trans          &trans       
            >;
        };

        mouse_layer {
            display-name = "MOUSE_LAYER";
            // -------------------------------------------------------------------------------------------------------------
            // | SK HYPER | BKMRKS | NEWTB  | LASTTAB | HOME  | UP    | PGUP | SCRLLFT | MOUSUP | SCRLLRT | VOLUP | SK ALT   |
            // | SK LGUI  | MKBKRK | LFCLK  | MIDCLK  | RTCLK | DOWN  | PGDN | MOUSLFT | MOUSDN | MOUSRT  | VOLDN | SK CTRL  |
            // | SK MEH   | BKMBAR | NEWWIN | INCOG   | LEFT  | RIGHT | HOME | SCRLUP  | SCRLDN | END     | MUTE  | SK SHIFT |
            //                               | TAB    | SHFT  | SPC   | ENT  | SHIFT   | BSP    |
            bindings = <
                &trans &kp LC(LS(O)) &kp LC(T) &kp LC(LS(T)) &kp LA(HOME) &kp UP    &kp PG_UP &msc SCRL_LEFT &mmv MOVE_UP   &msc SCRL_RIGHT &kp K_VOL_UP &trans
                &trans &kp LC(D)     &mkp LCLK &mkp MCLK     &mkp  RCLK   &kp DOWN  &kp PG_DN &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp K_VOL_DN &trans
                &trans &kp LC(LS(B)) &kp LC(N) &kp LS(LC(N)) &kp LEFT     &kp RIGHT &kp HOME  &msc SCRL_UP   &msc SCRL_DOWN &kp END         &kp K_MUTE   &trans
                                               &trans        &trans       &trans    &trans    &trans         &trans       
            >;
        };
    };
};
