/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define	qk	1
#define	wk	2
#define	ek	3
#define	rk	4
#define	tk	5
#define	yk	21
#define	uk	22
#define	ik	23
#define	ok	24
#define	pk	25
#define	ak	7
#define	sk	8
#define	dk	9
#define	fk	10
#define	gk	11
#define	hk	27
#define	jk	28
#define	kk	29
#define	lk	30
#define	semik	31
#define	zk	13
#define	xk	14
#define	ck	15
#define	vk	16
#define	bk	17
#define	nk	33
#define	mk	34
#define	commak	35
#define	periodk	36
#define	slashk	37

&caps_word {
    continue-list = <BACKSPACE DELETE>;
};

/ {
    chosen {
        zmk,physical-layout = &default_layout;
    };
};

/ {
    macros {
        control_panel: control_panel { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp O &kp N &kp T &kp R &kp O &kp L &kp ENTER>
                ;
        };

        launch_chrome: launch_chrome { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp H &kp R &kp O &kp M &kp E &kp ENTER>
                ;
        };

        mycomputer: mycomputer { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp S &kp H &kp E &kp L &kp L &kp COLON &kp M &kp Y &kp C &kp O &kp M &kp P &kp U &kp T &kp E &kp R &kp F &kp O &kp L &kp D &kp E &kp R &kp ENTER>
                ;
        };
	
	launch_vscode: launch_vscode { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp O &kp D &kp E &kp ENTER>
                ;
        };

    	launch_edge: launch_edge { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp M &kp I &kp C &kp R &kp O &kp S &kp O &kp F &kp T &kp MINUS &kp E &kp D &kp G &kp E &kp COLON &kp ENTER>
                ;
        };
    	
	launch_notepadpp: launch_notepadpp { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 80>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp N &kp O &kp T &kp E &kp P &kp A &kp D &kp PLUS &kp PLUS &kp ENTER>
                ;
        };
    	
        // Layer with mod when held
	
	lm: lm {
	    compatible = "zmk,behavior-macro-two-param";
	    wait-ms = <0>;
	    tap-ms = <0>;
	    #binding-cells = <2>;
	    bindings
	        = <&macro_param_1to1>
	        , <&macro_press &mo MACRO_PLACEHOLDER>
	        , <&macro_param_2to1>
	        , <&macro_press &kp MACRO_PLACEHOLDER>
	        , <&macro_pause_for_release>
	        , <&macro_param_2to1>
	        , <&macro_release &kp MACRO_PLACEHOLDER>
	        , <&macro_param_1to1>
	        , <&macro_release &mo MACRO_PLACEHOLDER>
	        ;
	};
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        // Characters
		
        combo_doublequ {
            timeout-ms = <50>;
            key-positions = <dk fk>;
            bindings = <&kp DQT>;
        };
	combo_singlequ {
            timeout-ms = <50>;
            key-positions = <jk kk>;
            bindings = <&kp SQT>;
        };
	combo_lpar {
            timeout-ms = <50>;
            key-positions = <ck vk>;
            bindings = <&kp LPAR>;
        };
	combo_rpar {
            timeout-ms = <50>;
            key-positions = <mk commak>;
            bindings = <&kp RPAR>;
        };
	combo_lbrace {
            timeout-ms = <50>;
            key-positions = <xk ck vk>;
            bindings = <&kp LBKT>;
        };
	combo_rbrace {
            timeout-ms = <50>;
            key-positions = <mk commak periodk>;
            bindings = <&kp RBKT>;
        };
	combo_lcurly {
            timeout-ms = <50>;
            key-positions = <xk vk>;
            bindings = <&kp LBRC>;
        };
	combo_rcurly {
            timeout-ms = <50>;
            key-positions = <mk periodk>;
            bindings = <&kp RBRC>;
        };

        // macro combos

         combo_chrome {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck hk>;
            bindings = <&launch_chrome>;
        };

        combo_mycomputer {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck yk>;
            bindings = <&mycomputer>;
        };

        combo_cpanel {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck nk>;
            bindings = <&control_panel>;
        };

        combo_vscode {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck uk>;
            bindings = <&launch_vscode>;
        };

        combo_edge {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck jk>;
            bindings = <&launch_edge>;
        };
        
        combo_notepadpp {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck mk>;
            bindings = <&launch_notepadpp>;
        };

        // Layer combos
        
        combo_alpha {
            timeout-ms = <50>;
            key-positions = <jk kk lk>;
            bindings = <&to 0>;
        };
        combo_numbsym {
            timeout-ms = <50>;
            key-positions = <hk jk kk>;
            bindings = <&tog 1>;
        };
        combo_numbsymosl {
            timeout-ms = <50>;
            key-positions = <hk kk>;
            bindings = <&sl 1>;
        };
        combo_func {
            timeout-ms = <50>;
            key-positions = <nk mk commak>;
            bindings = <&tog 2>;
        };
        combo_funcosl {
            timeout-ms = <50>;
            key-positions = <nk commak>;
            bindings = <&sl 2>;
        };
        combo_apps {
            timeout-ms = <50>;
            key-positions = <yk uk ik>;
            bindings = <&tog 3>;
        };
        combo_appsosl {
            timeout-ms = <50>;
            key-positions = <yk ik>;
            bindings = <&sl 3>;
        };

	// activate number layer with shift when held.

	comnbo_layermod_left {
	    timeout-ms = <50>;
            key-positions = <hk jk>;
            bindings = <&lm 1 RSHIFT>;
	};

	// Behavioral

        combo_esc {
            timeout-ms = <50>;
            key-positions = <fk gk>;
            bindings = <&kp ESC>;
        };
	
	combo_winclose {
            timeout-ms = <50>;
 	    require-prior-idle-ms = <250>;
            key-positions = <rk tk>;
            bindings = <&kp LC(F4)>;
        };
	
	combo_appclose {
            timeout-ms = <50>;
 	    require-prior-idle-ms = <250>;
            key-positions = <vk bk>;
            bindings = <&kp LA(F4)>;
        };
	combo_caplock {
            timeout-ms = <50>;
            key-positions = <zk xk ck>;
            bindings = <&kp CAPS>;
        };
	combo_capsword {
            timeout-ms = <50>;
            key-positions = <ck bk>;
            bindings = <&caps_word>;
        };
	combo_del {
            timeout-ms = <50>;
            key-positions = <dk gk>;
            bindings = <&kp DEL>;
        };
	combo_leftarr {
            timeout-ms = <100>;
            key-positions = <dk fk gk>;
            bindings = <&kp LEFT>;
        };
	combo_rightarr {
            timeout-ms = <100>;
            key-positions = <ek rk tk>;
            bindings = <&kp RIGHT>;
        };
	combo_uparr {
            timeout-ms = <100>;
            key-positions = <wk ek rk>;
            bindings = <&kp UP>;
        };
	combo_dnarr {
            timeout-ms = <100>;
            key-positions = <sk dk fk>;
            bindings = <&kp DOWN>;
        };
	combo_pgup {
            timeout-ms = <50>;
            key-positions = <fk jk>;
            bindings = <&kp PG_UP>;
        };
	combo_pgdn {
            timeout-ms = <50>;
            key-positions = <vk mk>;
            bindings = <&kp PG_DN>;
        };
	combo_home {
            timeout-ms = <50>;
            key-positions = <gk hk>;
            bindings = <&kp HOME>;
        };
	combo_end {
            timeout-ms = <50>;
            key-positions = <bk nk>;
            bindings = <&kp END>;
        };
    	combo_teamsmute {
            timeout-ms = <50>;
            key-positions = <rk uk>;
            bindings = <&kp LS(LC(M))>;
        };
    	combo_teamsvidtog {
            timeout-ms = <50>;
            key-positions = <tk yk>;
            bindings = <&kp LS(LC(O))>;
        };

	// Boot key combos

	combo_bootleft {
            timeout-ms = <50>;
            key-positions = <qk tk>;
            bindings = <&bootloader>;
        };

	combo_bootright {
            timeout-ms = <50>;
            key-positions = <yk pk>;
            bindings = <&bootloader>;
        };

	// Mouse combos

	combo_left_click {
            timeout-ms = <50>;
            key-positions = <sk fk>;
            bindings = <&mkp LCLK>;
        };
	combo_right_click {
            timeout-ms = <50>;
            key-positions = <wk rk>;
            bindings = <&mkp  RCLK>;
        };
	combo_middle_click {
            timeout-ms = <50>;
            key-positions = <ek tk>;
            bindings = <&mkp MCLK>;
        }; 
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
                 &sk LG(LS(LA(LCTRL)))  &kp Q  &kp W   &kp E     &kp R       &kp T   &kp Y     &kp U    &kp I     &kp O   &kp P    &sk LALT
                &sk LGUI               &kp A  &kp S   &kp D     &kp F       &kp G   &kp H     &kp J    &kp K     &kp L   &kp SEMI &kp LCTRL
                &sk LC(LA(LSHIFT))     &kp Z  &kp X   &kp C     &kp V       &kp B   &kp N     &kp M    &kp COMMA &kp DOT &kp FSLH &kp LSHIFT
                                              &kp TAB &kp LSHFT &kp SPACE   &kp RET &kp RSHFT &kp BSPC
            >;
        };

        numbsym_layer {
            display-name = "NUMBER";
            bindings = <
                &trans  &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT     &kp CARET  &kp AMPS    &kp ASTRK  &kp LPAR   &kp RPAR  &trans
                &trans  &kp N1     &kp N2     &kp N3     &kp N4     &kp N5        &kp N6     &kp N7      &kp N8     &kp N9     &kp N0    &trans
                &trans  &kp GRAVE  &kp BSLH   &kp EQUAL  &kp MINUS  &kp UNDER     &kp SQT    &kp SEMI    &kp COMMA  &kp DOT    &kp SLASH &trans
                                              &trans     &trans     &trans        &trans     &trans      &trans
            >;
        };

        function_layer  {
            display-name = "FUNCTIONS";
            bindings = <
              &trans &kp C_PLAY      &kp C_STOP &kp C_NEXT &kp C_AC_BACK  &kp F11      &kp F12     &kp K_VOL_UP &kp C_VOL_DN  &kp C_MUTE  &kp RG(L)       &trans
              &trans &kp F1          &kp F2     &kp F3     &kp F4         &kp F5       &kp F6      &kp F7       &kp F8        &kp F9      &kp F10         &trans
              &trans &kp LC(LA(DEL)) &trans     &trans     &trans         &trans       &trans      &trans       &trans        &trans      &kp LC(LA(DEL)) &trans
                                                &trans     &trans         &trans       &trans      &trans       &trans       
            >;
        };

        appcontrol_layer  {
            display-name = "APPCONTROL";
            bindings = <
                &trans &bt BT_CLR  &bt BT_SEL 0 &kp LG(DOT)     &kp LG(R)              &kp LS(LC(LA(LG(T))))    &kp LS(LC(LA(LG(P)))) &kp C_BRI_UP    &kp C_BRI_DN          &bt BT_SEL 0 &bt BT_CLR  &trans 
                &trans &bootloader &bt BT_SEL 1 &control_panel  &kp LG(E)              &kp LS(LC(LA(LG(W))))    &kp C_AL_CALC         &kp RC(RS(ESC)) &kp LS(LC(LA(LG(L)))) &bt BT_SEL 1 &bootloader &trans 
                &trans &sys_reset  &bt BT_SEL 2 &kp LG(V)       &kp LS(LC(LA(LG(O))))  &kp LS(LC(LA(LG(X))))    &kp LS(LG(S))         &trans          &trans                &bt BT_SEL 2 &sys_reset  &trans 
                                   &trans       &trans          &trans                 &trans                   &trans                &trans       
            >;
        };

    };
};
